==============================================================
           
                     OpenCL Cache Predictor
           
==============================================================

July 2014  Ewan Crawford[ewan.cr@gmail.com]

//////////////////////// Introduction ////////////////////////////

Tool for visualising the memory accesses of OpenCL programs then predicting cache performance.

OpenCL programs are written using a wrapper created by Alberto Magni[alberto.magni86@gmail.com]. This wrapper 
performs insrumentation passes on the OpenCL kernels using the LLVM optimizer tool opt. These passes allow
instructions to be inserted that record information about global memory accesses. 

OpenCL programs are written using a wrapper created by Alberto Magni[alberto.magni86@gmail.com]. This wrapper 
performs insrumentation passes on the OpenCL kernels using the LLVM optimizer tool opt. Axtor is then used as
a OpenCL backend to convert the instrumented LLVM IR back into an OpenCL kernel that can be executed.

After execution a trace of memory accesses is available in representing the order executed by the users 
hardware. In order to generalise this to a machine independent representation of GPU OpenCL execution these
memory accesses are then reodered using a scheduler. 

This resulting trace can then be plotted using R[http://www.r-project.org/] to visualise the memory 
access pattern of the OpenCL program. Additionally this trace can be put through a NVIDIA FERMI
cache simualtion to predict it's performance.


//////////////////////// Dependencies //////////////////////////// 

LLVM 3.3[http://llvm.org/]
Axtor[bitbucket.org/gnarf/axtor/, Simon Moll]

/////////////////////// Build Instructions ///////////////////////
 
 # First build the LLVM passes by copying them into your llvm source tree, and rebuilding LLVM

 $> cp SOURCE_DIR/passes/*   LLVM_SOURCE_DIR/lib/Transforms/
 $> cd LLVM_SOURCE_DIR/lib/Transforms
 $> append 'add_subdirectory(MemTrace), add_subdirectory(MemSize)' to CMakeLists.txt 
 $> rebuild LLVM
 $> export VIS_PASSES as path to shared object files for passes

 # Next build the tool and export location of built 'tools/'directory as VIS_TOOLS
 # and location of SOURCE_DIR/support/scripts as SCRIPT_PATH

 $> mkdir build
 $> cd build
 $> cmake [SOURCE_DIR]
 $> make
 $> export VIS_TOOLS
 $> export SCRIPT_PATH
 
  

///////////////////// Project structure ///////////////////////////

visualise.py   --Links components together                   

benchmarks/    --Benchmarks implemented using wrapper
        matrix/   
           mm/
           mt/
           mv/

        parboil/
           stencil/
           bfs/
  
        polybench/
           OpenCL/
             
passes/
    MemSize/        --LLVM pass that calculates the length of the trace
                      so that memory can be allocated

    MemTrace/       --LLVM pass that adds instructions to record memory accesses

support/

    scripts/        --Bash scripts called by OpenCL wrapper for executing LLVM passes

    wrapper/        --Alberto Magni's OpenCL wrapper

tools/
    R/              --Plots the graph of memory accesses

    scheduler/      --Rearranges machine dependent memory accesses so they represent a GPU.
 
    cacheSimulator/ --simulates cache performance of memory accesses

